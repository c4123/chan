#pragma once

/// usleep()
#cmakedefine HAVE_USLEEP
#ifndef HAVE_USLEEP

#ifdef WIN32
#ifdef __cplusplus
extern "C"
{
#endif
void __stdcall Sleep(unsigned long ms);
#ifdef __cplusplus
}
#endif
#define usleep(e) Sleep((unsigned long)((e)/1000.0)) // us -> ms
#define  sleep(e) Sleep((unsigned long)((e)*1000.0)) //  s -> ms
#else
// Not windows and missing usleep (not *nix?)
#error "Can't find replacement for usleep(), etc.."
#endif

#endif //HAVE_USLEEP not defined

/// srand48
#cmakedefine HAVE_UNISTD
#ifdef HAVE_UNISTD
#include <unistd.h>
#else

#ifdef WIN32
#define seed48(e)     srand(*(e))
#define drand48() (( (double)rand() )/RAND_MAX)
#else
#error "Don't know how to choose a random number generator"
#endif

#endif // HAVE_UNISTD not defined

//////////////////////////////////////////////////////////////////////
// Atomic intrinsics
// - prefer the windows syntax
//////////////////////////////////////////////////////////////////////

#cmakedefine HAVE_ATOMIC_INTRINSICS_GCC
#cmakedefine HAVE_ATOMIC_INTRINSICS_MSVC
#if !defined(HAVE_ATOMIC_INTRINSICS_GCC) && !defined(HAVE_ATOMIC_INTRINSICS_MSVC)
#error "Don't know how to choose atomic intrinsics"
#endif

#ifdef HAVE_ATOMIC_INTRINSICS_GCC
#define InterlockedIncrement(e) __sync_add_and_fetch((e),1)
#endif

